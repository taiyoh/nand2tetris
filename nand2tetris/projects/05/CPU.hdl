// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    And(a=instruction[15], b=instruction[3], out=writeM);

    // Data register
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=compresult, load=loadd, out=data);

    Mux16(a=instruction, b=compresult, sel=instruction[15], out=aout);
    // Address register
    And(a=instruction[15], b=instruction[5], out=setareg);
    Not(in=instruction[15], out=ainst);
    Or(a=setareg, b=ainst, out=loada);
    ARegister(in=aout, load=loada, out=addr, out[0..14]=addressM);

    Mux16(a=addr, b=inM ,sel=instruction[12], out=v);

    //  00111 00110  |  0 0 1 1 0 0 = 00111 & 11111 = 00111 D
    //  00111 00101  |  1 1 0 0 0 0 = 11111 & 00101 = 00110 v
    //  00111 00101  |  0 0 1 1 0 1 = !(00111 & 11111) = !00111 = 11000 !D
    //  00111 00101  |  1 1 0 0 0 1 = !(11111 & 00101) = !00101 = 11010 !v
    //  00111 00101  |  0 1 1 1 1 1 = !(11000 + 11111) = !10111 = 01000 D+1
    //  00111 00101  |  1 1 0 1 1 1 = !(11111 + 11010) = !11001 = 00110 v+1
    //  00111 00101  |  0 0 1 1 1 0 = 00111 + 11111 = 00110 D-1
    //  00111 00101  |  1 1 0 0 1 0 = 11111 + 00101 = 00100 v-1
    //  00111 00101  |  0 0 1 1 1 1 = !(00111 + 11111) = !00110 = 11001 -D
    //  00111 00101  |  1 1 0 0 1 1 = !(11111 + 00101) = !00100 = 11011 -v

    ALU(x=data, y=v, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=compresult, zr=iszero, ng=isnegative);
    And(a=instruction[2], b=isnegative, out=jmp1);
    And(a=instruction[1], b=iszero, out=jmp2);
    Or(a=jmp1, b=jmp2, out=jmpgte);
    Or(a=isnegative, b=iszero, out=notgte);
    Not(in=notgte, out=ispositive);
    And(a=instruction[0], b=ispositive, out=jmp3);
    Or(a=jmpgte, b=jmp3, out=jmpflg);
    And(a=jmpflg, b=instruction[15], out=isjump);
    Not(in=isjump, out=nextstep);

    PC(in=addr, load=isjump, inc=nextstep, reset=reset, out[0..14]=pc);
}